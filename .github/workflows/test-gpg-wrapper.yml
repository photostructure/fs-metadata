name: Test GPG Wrapper Signing

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 1. Import your GPG key and enable loopback pinentry
      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }} # Base64-encoded ASCII armoured key
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          # Restart the agent so it picks up the new settings
          gpgconf --kill gpg-agent
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          # Set trust for the imported key (trust level 5 = ultimate)
          KEY_ID=$(gpg --list-keys --with-colons | awk -F: '/^pub/ {print $5; exit}')
          echo -e "5\ny\n" | gpg --command-fd 0 --edit-key "$KEY_ID" trust
          gpg --list-keys --keyid-format LONG

      # 2. Create a GPG wrapper script that passes the passphrase
      - name: Install GPG signing script
        run: |
          cat << 'EOF' > ./gpg.sh
          #!/usr/bin/env bash
          gpg --batch --yes --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" "$@"
          EOF
          chmod +x ./gpg.sh

      # 3. Configure Git for GPG signing
      - name: Configure Git for GPG signing
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global gpg.program "$(pwd)/gpg.sh"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          # Set npm to sign git tags by default
          npm config set sign-git-tag true

      # 4. Test the setup
      - name: Test GPG wrapper signing
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -x
          # Show git and gpg config for debugging
          git config --list --show-origin
          gpg --version
          gpg --list-keys --keyid-format LONG
          # Test direct GPG signing
          echo "Testing GPG wrapper..."
          echo "test" | ./gpg.sh --clearsign
          # Test git commit signing
          echo "Testing git commit signing..."
          echo "Test file - $(date)" > test-gpg-wrapper.txt
          git add test-gpg-wrapper.txt
          git commit -m "test: GPG wrapper signing - $(date)"
          # Verify the commit was signed
          echo "Verifying commit signature..."
          git log --show-signature -1
          # Test tag signing explicitly
          echo "Testing git tag signing..."
          git tag -s v1.0.0-test -m "test tag"
          git tag -v v1.0.0-test
          # Test npm version in a temporary directory
          echo "Testing npm version with GPG wrapper in tmp..."
          mkdir -p tmp
          cat > tmp/package.json << EOF
          {
            "name": "test-gpg-wrapper",
            "version": "1.0.0-pre"
          }
          EOF
          (cd tmp && npm version patch --message "test: npm version with GPG wrapper %s")
          # Verify the version commit was signed
          git log --show-signature -1
          # Show recent tags and their signatures
          git tag --list
          for tag in $(git tag --list); do git tag -v "$tag" || true; done

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Remove imported GPG key and sensitive files
        run: |
          echo "Cleaning up GPG key and sensitive files..."
          # Remove all GPG keys
          gpg --batch --yes --delete-secret-keys || true
          gpg --batch --yes --delete-keys || true
          rm -rf ~/.gnupg
          rm -f ./gpg.sh
          rm -rf tmp
          echo "Cleanup complete."
